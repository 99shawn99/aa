# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19fY5pk2bmLHxmbs6jJNrA-QSF6gJTcdR
"""

import streamlit as st
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import load_model
import numpy as np
import requests
import os

# Define the Google Drive file ID and URL
file_id = '1FnayOzCAS2O4ZqOiWp2GTLtYQqVzD5rZ'
model_url = f"https://drive.google.com/uc?id={file_id}"
model_path = "face_mask_detector_model.keras"

# Function to download the model
def download_model(url, path):
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an HTTPError for bad responses
        with open(path, "wb") as file:
            file.write(response.content)
        st.write("Model downloaded successfully.")
    except requests.exceptions.RequestException as e:
        st.error(f"Error downloading model: {e}")

# Download the model if not present
if not os.path.isfile(model_path):
    st.write("Downloading model...")
    download_model(model_url, model_path)
else:
    st.write("Model already exists.")


# Print out the files in the directory for debugging
st.write("Files in current directory:", os.listdir('.'))

# Initialize model variable
model = None

# Load the trained model with error handling
try:
    model = load_model(model_path)
    st.write("Model loaded successfully.")
except Exception as e:
    st.error(f"Error loading model: {e}")

# Function to preprocess the uploaded image
def preprocess_image(image):
    img = load_img(image, target_size=(224, 224))
    img = img_to_array(img)
    img = img / 255.0
    img = np.expand_dims(img, axis=0)
    return img

# Function to make a prediction
def predict_image(image):
    if model is None:
        st.error("Model is not loaded. Cannot make predictions.")
        return None, None

    processed_image = preprocess_image(image)
    prediction = model.predict(processed_image)[0]
    class_names = ["No Mask", "Mask"]  # Adjust based on your model's output
    predicted_class = class_names[np.argmax(prediction)]
    confidence = np.max(prediction)
    return predicted_class, confidence

# Streamlit UI
st.title("Face Mask Detection")
st.write("Upload an image to detect if the person is wearing a face mask.")

# File uploader for user to upload image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Display the uploaded image
    st.image(uploaded_file, caption="Uploaded Image", use_column_width=True)
    st.write("Classifying...")

    # Predict the uploaded image
    label, confidence = predict_image(uploaded_file)

    if label is not None:
        # Show progress bar
        progress_percentage = int(confidence * 100)
        st.progress(progress_percentage)

        # Show results
        st.write(f"Prediction: **{label}**")
        st.write(f"Model Confidence: **{confidence:.2f}**")

        # Display additional information about prediction
        if label == "No Mask":
            st.write("⚠️ **Warning:** The model detected that the person is not wearing a face mask.")
        else:
            st.write("✅ **Good news:** The model detected that the person is wearing a face mask.")





